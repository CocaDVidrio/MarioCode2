
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 12 00:18:58 CST 2025
//----------------------------------------------------

package cod;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 12 00:18:58 CST 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\007\000\002\004" +
    "\007\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\005\000\002\012\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\006\011\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\007\011\000\002\011\012" +
    "\000\002\011\012\000\002\011\011\000\002\011\011\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\015\010\000\002\015\010\000\002\016" +
    "\011\000\002\017\007\000\002\017\010\000\002\017\006" +
    "\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\035\004\001\002\000\004\030\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\031\010\001\002\000\004\032\011\001\002\000" +
    "\030\005\013\006\023\007\016\010\034\011\035\013\030" +
    "\015\012\037\022\040\031\041\033\042\015\001\002\000" +
    "\004\030\310\001\002\000\004\030\237\001\002\000\032" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\013\ufffa\015" +
    "\ufffa\032\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\001\002" +
    "\000\012\017\200\020\177\021\201\022\175\001\002\000" +
    "\004\037\227\001\002\000\032\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\013\ufff2\015\ufff2\032\ufff2\037\ufff2\040" +
    "\ufff2\041\ufff2\042\ufff2\001\002\000\032\005\013\006\023" +
    "\007\016\010\034\011\035\013\030\015\012\032\226\037" +
    "\022\040\031\041\033\042\015\001\002\000\032\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\032" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\001\002\000\014" +
    "\016\164\017\162\020\161\021\163\022\160\001\002\000" +
    "\006\026\143\037\144\001\002\000\032\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\013\ufff0\015\ufff0\032\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\032\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\015\ufff4\032" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\001\002\000\032" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\013\ufffc\015" +
    "\ufffc\032\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002" +
    "\000\032\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013" +
    "\ufff6\015\ufff6\032\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\001\002\000\004\030\117\001\002\000\004\030\061\001" +
    "\002\000\032\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\013\ufff8\015\ufff8\032\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\001\002\000\004\017\056\001\002\000\004\037\046" +
    "\001\002\000\004\030\036\001\002\000\004\037\037\001" +
    "\002\000\006\041\041\042\040\001\002\000\004\031\044" +
    "\001\002\000\004\031\042\001\002\000\004\036\043\001" +
    "\002\000\032\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\013\uffbf\015\uffbf\032\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\001\002\000\004\036\045\001\002\000\032\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013\uffc0\015\uffc0\032" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\001\002\000\010" +
    "\016\051\025\047\036\050\001\002\000\004\043\054\001" +
    "\002\000\032\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\013\uffed\015\uffed\032\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\001\002\000\004\043\052\001\002\000\004\036\053" +
    "\001\002\000\032\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\013\uffe6\015\uffe6\032\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\001\002\000\004\036\055\001\002\000\032\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\015\uffe5" +
    "\032\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000" +
    "\004\041\057\001\002\000\004\036\060\001\002\000\032" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\015" +
    "\uffd8\032\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\001\002" +
    "\000\012\027\065\037\066\041\063\042\062\001\002\000" +
    "\004\024\114\001\002\000\004\024\111\001\002\000\004" +
    "\031\075\001\002\000\006\031\uffd3\036\uffd3\001\002\000" +
    "\004\024\067\001\002\000\014\027\072\037\073\041\071" +
    "\042\070\043\074\001\002\000\006\031\uffd1\036\uffd1\001" +
    "\002\000\006\031\uffd0\036\uffd0\001\002\000\006\031\uffd2" +
    "\036\uffd2\001\002\000\006\031\uffcf\036\uffcf\001\002\000" +
    "\006\031\uffce\036\uffce\001\002\000\004\032\076\001\002" +
    "\000\030\005\013\006\023\007\016\010\034\011\035\013" +
    "\030\015\012\037\022\040\031\041\033\042\015\001\002" +
    "\000\032\005\013\006\023\007\016\010\034\011\035\013" +
    "\030\015\012\032\103\037\022\040\031\041\033\042\015" +
    "\001\002\000\032\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\013\ufffb\015\ufffb\032\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\001\002\000\032\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\015\ufff3\032\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\001\002\000\032\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\013\uffff\015\uffff\032\uffff\037\uffff" +
    "\040\uffff\041\uffff\042\uffff\001\002\000\032\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\015\uffd4\032\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001\002\000\032\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\015\ufff1" +
    "\032\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\001\002\000" +
    "\032\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\013\ufffd" +
    "\015\ufffd\032\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\001" +
    "\002\000\032\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\013\ufff5\015\ufff5\032\ufff5\037\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\001\002\000\032\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\013\ufff7\015\ufff7\032\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\001\002\000\032\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\015\ufff9\032\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\001\002\000\006\027\112\037\113" +
    "\001\002\000\006\031\uffcc\036\uffcc\001\002\000\006\031" +
    "\uffca\036\uffca\001\002\000\006\027\115\037\116\001\002" +
    "\000\006\031\uffcd\036\uffcd\001\002\000\006\031\uffcb\036" +
    "\uffcb\001\002\000\004\037\120\001\002\000\004\031\121" +
    "\001\002\000\004\032\122\001\002\000\006\012\123\014" +
    "\124\001\002\000\004\042\137\001\002\000\004\032\134" +
    "\001\002\000\006\012\126\032\127\001\002\000\004\042" +
    "\130\001\002\000\032\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\013\uffbe\015\uffbe\032\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\001\002\000\004\032\131\001\002\000\030" +
    "\005\013\006\023\007\016\010\034\011\035\013\030\015" +
    "\012\037\022\040\031\041\033\042\015\001\002\000\032" +
    "\005\013\006\023\007\016\010\034\011\035\013\030\015" +
    "\012\032\133\037\022\040\031\041\033\042\015\001\002" +
    "\000\006\012\uffbc\032\uffbc\001\002\000\030\005\013\006" +
    "\023\007\016\010\034\011\035\013\030\015\012\037\022" +
    "\040\031\041\033\042\015\001\002\000\032\005\013\006" +
    "\023\007\016\010\034\011\035\013\030\015\012\032\136" +
    "\037\022\040\031\041\033\042\015\001\002\000\006\012" +
    "\uffbb\032\uffbb\001\002\000\004\032\140\001\002\000\030" +
    "\005\013\006\023\007\016\010\034\011\035\013\030\015" +
    "\012\037\022\040\031\041\033\042\015\001\002\000\032" +
    "\005\013\006\023\007\016\010\034\011\035\013\030\015" +
    "\012\032\142\037\022\040\031\041\033\042\015\001\002" +
    "\000\006\012\uffbd\032\uffbd\001\002\000\004\037\156\001" +
    "\002\000\012\016\150\025\145\026\147\036\146\001\002" +
    "\000\004\042\154\001\002\000\032\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\015\uffef\032\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\001\002\000\004\036\153\001" +
    "\002\000\004\042\151\001\002\000\004\036\152\001\002" +
    "\000\032\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013" +
    "\uffea\015\uffea\032\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\001\002\000\032\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\015\uffe8\032\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\001\002\000\004\036\155\001\002\000\032\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\015\uffec" +
    "\032\uffec\037\uffec\040\uffec\041\uffec\042\uffec\001\002\000" +
    "\004\036\157\001\002\000\032\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\015\uffe7\032\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\001\002\000\004\042\224\001\002" +
    "\000\004\042\222\001\002\000\006\041\217\042\216\001" +
    "\002\000\004\042\214\001\002\000\012\037\170\041\166" +
    "\042\165\043\171\001\002\000\014\017\200\020\177\021" +
    "\201\022\175\036\176\001\002\000\006\017\056\036\174" +
    "\001\002\000\032\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\015\uffe1\032\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\001\002\000\014\017\162\020\161\021\163\022" +
    "\160\036\173\001\002\000\004\036\172\001\002\000\032" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\015" +
    "\uffe0\032\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001\002" +
    "\000\032\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013" +
    "\uffe2\015\uffe2\032\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\001\002\000\032\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\015\uffe3\032\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\001\002\000\004\042\212\001\002\000\032\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4\015\uffe4" +
    "\032\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002\000" +
    "\004\042\210\001\002\000\006\041\205\042\204\001\002" +
    "\000\004\042\202\001\002\000\004\036\203\001\002\000" +
    "\032\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5" +
    "\015\uffd5\032\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001" +
    "\002\000\004\036\207\001\002\000\004\036\206\001\002" +
    "\000\032\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013" +
    "\uffd9\015\uffd9\032\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\001\002\000\032\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\013\uffda\015\uffda\032\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\001\002\000\004\036\211\001\002\000\032\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\015\uffd7" +
    "\032\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\001\002\000" +
    "\004\036\213\001\002\000\032\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\013\uffd6\015\uffd6\032\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\001\002\000\004\036\215\001\002" +
    "\000\032\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\013" +
    "\uffdc\015\uffdc\032\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\001\002\000\004\036\221\001\002\000\004\036\220\001" +
    "\002\000\032\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\013\uffde\015\uffde\032\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\001\002\000\032\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\015\uffdf\032\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\001\002\000\004\036\223\001\002\000\032" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd\015" +
    "\uffdd\032\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002" +
    "\000\004\036\225\001\002\000\032\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\013\uffdb\015\uffdb\032\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\001\002\000\004\002\000\001" +
    "\002\000\010\016\232\025\230\036\231\001\002\000\004" +
    "\041\235\001\002\000\032\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\013\uffee\015\uffee\032\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\001\002\000\004\041\233\001\002\000" +
    "\004\036\234\001\002\000\032\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\013\uffe9\015\uffe9\032\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\001\002\000\004\036\236\001\002" +
    "\000\032\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\015\uffeb\032\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\001\002\000\010\006\240\007\242\037\243\001\002\000" +
    "\004\037\301\001\002\000\004\031\275\001\002\000\004" +
    "\037\266\001\002\000\004\016\244\001\002\000\006\041" +
    "\246\042\245\001\002\000\004\036\262\001\002\000\004" +
    "\036\247\001\002\000\012\027\065\037\066\041\063\042" +
    "\062\001\002\000\004\036\251\001\002\000\006\026\253" +
    "\037\254\001\002\000\004\031\uffc5\001\002\000\004\037" +
    "\261\001\002\000\006\025\255\026\256\001\002\000\006" +
    "\041\260\042\257\001\002\000\004\031\uffc2\001\002\000" +
    "\004\031\uffc4\001\002\000\004\031\uffc3\001\002\000\004" +
    "\031\uffc1\001\002\000\012\027\065\037\066\041\063\042" +
    "\062\001\002\000\004\036\264\001\002\000\006\026\253" +
    "\037\254\001\002\000\004\031\uffc6\001\002\000\004\016" +
    "\267\001\002\000\004\041\270\001\002\000\004\036\271" +
    "\001\002\000\012\027\065\037\066\041\063\042\062\001" +
    "\002\000\004\036\273\001\002\000\006\026\253\037\254" +
    "\001\002\000\004\031\uffc7\001\002\000\004\032\276\001" +
    "\002\000\030\005\013\006\023\007\016\010\034\011\035" +
    "\013\030\015\012\037\022\040\031\041\033\042\015\001" +
    "\002\000\032\005\013\006\023\007\016\010\034\011\035" +
    "\013\030\015\012\032\300\037\022\040\031\041\033\042" +
    "\015\001\002\000\032\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\013\uffc9\015\uffc9\032\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\001\002\000\004\016\302\001\002\000\004" +
    "\042\303\001\002\000\004\036\304\001\002\000\012\027" +
    "\065\037\066\041\063\042\062\001\002\000\004\036\306" +
    "\001\002\000\006\026\253\037\254\001\002\000\004\031" +
    "\uffc8\001\002\000\004\037\311\001\002\000\004\031\312" +
    "\001\002\000\004\036\313\001\002\000\032\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\013\uffba\015\uffba\032\uffba" +
    "\037\uffba\040\uffba\041\uffba\042\uffba\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\017\004\020\006\031\007\026\012" +
    "\025\013\013\015\024\016\016\020\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\101" +
    "\006\107\007\106\012\104\013\077\015\105\016\100\020" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\076\004\020\006\031\007\026" +
    "\012\025\013\013\015\024\016\016\020\023\001\001\000" +
    "\022\004\101\006\107\007\106\012\104\013\077\015\105" +
    "\016\100\020\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\131\004\020\006\031\007" +
    "\026\012\025\013\013\015\024\016\016\020\023\001\001" +
    "\000\022\004\101\006\107\007\106\012\104\013\077\015" +
    "\105\016\100\020\103\001\001\000\002\001\001\000\024" +
    "\003\134\004\020\006\031\007\026\012\025\013\013\015" +
    "\024\016\016\020\023\001\001\000\022\004\101\006\107" +
    "\007\106\012\104\013\077\015\105\016\100\020\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\140" +
    "\004\020\006\031\007\026\012\025\013\013\015\024\016" +
    "\016\020\023\001\001\000\022\004\101\006\107\007\106" +
    "\012\104\013\077\015\105\016\100\020\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\247\001\001\000" +
    "\002\001\001\000\004\005\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\262\001\001\000\002\001\001\000" +
    "\004\005\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\271\001" +
    "\001\000\002\001\001\000\004\005\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\276\004\020\006" +
    "\031\007\026\012\025\013\013\015\024\016\016\020\023" +
    "\001\001\000\022\004\101\006\107\007\106\012\104\013" +
    "\077\015\105\016\100\020\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\304\001\001\000\002\001\001\000\004\005\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // POWERUP ::= PowerUp Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POWERUP",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TOAD ::= Peach Llave_a SENTENCIA Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOAD",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TOAD ::= TOAD Toad Numero Llave_a SENTENCIA Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOAD",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TOAD ::= Toad Numero Llave_a SENTENCIA Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOAD",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASTILLO ::= Castillo Parentesis_a Identificador Parentesis_c Llave_a TOAD Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASTILLO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // METODO ::= Metodo Parentesis_a Identificador NumeroFlotante Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METODO ::= Metodo Parentesis_a Identificador Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_PUENTE ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_PUENTE ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_PUENTE ::= Identificador Op_atribucion NumeroFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_PUENTE ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_PUENTE ::= Identificador Igual NumeroFlotante P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_PUENTE ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_PUENTE ::= Luigi Identificador Igual NumeroFlotante P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_PUENTE ::= Mario Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PUENTE ::= Puente Parentesis_a SENTENCIA_PUENTE Parentesis_c Llave_a SENTENCIA Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUENTE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= NumeroFlotante Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= NumeroFlotante Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional NumeroFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TUBERIA ::= Tuberia Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TUBERIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= Numero Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERACION ::= Numero Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERACION ::= Numero Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACION ::= NumeroFlotante Suma NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACION ::= Numero Suma NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERACION ::= Numero Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERACION ::= Identificador Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERACION ::= Identificador Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERACION ::= Identificador Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACION ::= Identificador Suma NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= Identificador Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= Identificador Igual OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= Identificador Igual NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Chomp Identificador Op_atribucion Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Chomp Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Mario Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Mario Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Luigi Identificador Igual NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Mario Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Luigi Identificador Op_atribucion NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Mario Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Chomp Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Luigi Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Mario Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= POWERUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA POWERUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= CASTILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA CASTILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= TUBERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA TUBERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

