
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 12 23:50:11 MDT 2025
//----------------------------------------------------

package cod;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 12 23:50:11 MDT 2025
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\012\003\000\002\012\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\007\006\000\002\007" +
    "\006\000\002\016\006\000\002\016\006\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\005\000\002\011" +
    "\011\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\013\011\000\002\015\012\000\002\015" +
    "\012\000\002\015\011\000\002\015\011\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\024\004\000\002\021\007\000\002\021\007\000\002" +
    "\022\011\000\002\023\007\000\002\023\010\000\002\023" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\036\004\001\002\000\004\030\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\031\010\001\002\000\004\032\011\001\002\000" +
    "\024\005\013\006\022\007\014\010\034\011\035\013\027" +
    "\015\012\040\021\041\031\001\002\000\004\037\260\001" +
    "\002\000\004\030\206\001\002\000\004\040\201\001\002" +
    "\000\026\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013" +
    "\ufff4\015\ufff4\033\ufff4\040\ufff4\041\ufff4\001\002\000\026" +
    "\005\013\006\022\007\014\010\034\011\035\013\027\015" +
    "\012\033\177\040\021\041\031\001\002\000\026\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\013\ufffe\015\ufffe\033" +
    "\ufffe\040\ufffe\041\ufffe\001\002\000\026\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\013\uffef\015\uffef\033\uffef\040" +
    "\uffef\041\uffef\001\002\000\004\016\152\001\002\000\006" +
    "\026\140\040\141\001\002\000\026\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\013\ufff2\015\ufff2\033\ufff2\040\ufff2" +
    "\041\ufff2\001\002\000\026\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\015\ufff6\033\ufff6\040\ufff6\041\ufff6" +
    "\001\002\000\026\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\015\ufffc\033\ufffc\040\ufffc\041\ufffc\001\002" +
    "\000\026\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\013" +
    "\uffee\015\uffee\033\uffee\040\uffee\041\uffee\001\002\000\004" +
    "\030\113\001\002\000\026\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\013\ufff8\015\ufff8\033\ufff8\040\ufff8\041\ufff8" +
    "\001\002\000\004\030\056\001\002\000\026\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\013\uffed\015\uffed\033\uffed" +
    "\040\uffed\041\uffed\001\002\000\026\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\013\ufffa\015\ufffa\033\ufffa\040\ufffa" +
    "\041\ufffa\001\002\000\004\040\046\001\002\000\004\030" +
    "\036\001\002\000\006\040\040\043\037\001\002\000\004" +
    "\031\043\001\002\000\004\031\041\001\002\000\004\037" +
    "\042\001\002\000\026\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\013\uffc2\015\uffc2\033\uffc2\040\uffc2\041\uffc2\001" +
    "\002\000\004\037\044\001\002\000\026\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\013\uffc3\015\uffc3\033\uffc3\040" +
    "\uffc3\041\uffc3\001\002\000\004\037\055\001\002\000\010" +
    "\016\050\037\ufff1\046\047\001\002\000\004\040\054\001" +
    "\002\000\004\044\051\001\002\000\004\037\052\001\002" +
    "\000\026\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\015\uffe7\033\uffe7\040\uffe7\041\uffe7\001\002\000\004" +
    "\037\ufff0\001\002\000\006\037\ufff1\046\047\001\002\000" +
    "\026\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\015\uffea\033\uffea\040\uffea\041\uffea\001\002\000\012\027" +
    "\062\040\063\042\061\043\057\001\002\000\004\024\110" +
    "\001\002\000\004\031\075\001\002\000\004\024\072\001" +
    "\002\000\006\031\uffd7\037\uffd7\001\002\000\004\024\064" +
    "\001\002\000\014\027\067\040\070\042\066\043\065\044" +
    "\071\001\002\000\006\031\uffd5\037\uffd5\001\002\000\006" +
    "\031\uffd4\037\uffd4\001\002\000\006\031\uffd6\037\uffd6\001" +
    "\002\000\006\031\uffd3\037\uffd3\001\002\000\006\031\uffd2" +
    "\037\uffd2\001\002\000\006\027\073\040\074\001\002\000" +
    "\006\031\uffd0\037\uffd0\001\002\000\006\031\uffce\037\uffce" +
    "\001\002\000\004\032\076\001\002\000\024\005\013\006" +
    "\022\007\014\010\034\011\035\013\027\015\012\040\021" +
    "\041\031\001\002\000\026\005\013\006\022\007\014\010" +
    "\034\011\035\013\027\015\012\033\102\040\021\041\031" +
    "\001\002\000\026\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\013\ufff5\015\ufff5\033\ufff5\040\ufff5\041\ufff5\001\002" +
    "\000\026\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013" +
    "\uffff\015\uffff\033\uffff\040\uffff\041\uffff\001\002\000\026" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\015" +
    "\uffd8\033\uffd8\040\uffd8\041\uffd8\001\002\000\026\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\015\ufff3\033" +
    "\ufff3\040\ufff3\041\ufff3\001\002\000\026\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\013\ufff7\015\ufff7\033\ufff7\040" +
    "\ufff7\041\ufff7\001\002\000\026\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\013\ufffd\015\ufffd\033\ufffd\040\ufffd\041" +
    "\ufffd\001\002\000\026\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\013\ufff9\015\ufff9\033\ufff9\040\ufff9\041\ufff9\001" +
    "\002\000\026\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\013\ufffb\015\ufffb\033\ufffb\040\ufffb\041\ufffb\001\002\000" +
    "\006\027\111\040\112\001\002\000\006\031\uffd1\037\uffd1" +
    "\001\002\000\006\031\uffcf\037\uffcf\001\002\000\004\040" +
    "\114\001\002\000\004\031\115\001\002\000\004\032\116" +
    "\001\002\000\006\012\117\014\120\001\002\000\004\043" +
    "\133\001\002\000\004\032\130\001\002\000\006\012\123" +
    "\033\122\001\002\000\026\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\013\uffc1\015\uffc1\033\uffc1\040\uffc1\041\uffc1" +
    "\001\002\000\004\043\124\001\002\000\004\032\125\001" +
    "\002\000\024\005\013\006\022\007\014\010\034\011\035" +
    "\013\027\015\012\040\021\041\031\001\002\000\026\005" +
    "\013\006\022\007\014\010\034\011\035\013\027\015\012" +
    "\033\127\040\021\041\031\001\002\000\006\012\uffbf\033" +
    "\uffbf\001\002\000\024\005\013\006\022\007\014\010\034" +
    "\011\035\013\027\015\012\040\021\041\031\001\002\000" +
    "\026\005\013\006\022\007\014\010\034\011\035\013\027" +
    "\015\012\033\132\040\021\041\031\001\002\000\006\012" +
    "\uffbe\033\uffbe\001\002\000\004\032\134\001\002\000\024" +
    "\005\013\006\022\007\014\010\034\011\035\013\027\015" +
    "\012\040\021\041\031\001\002\000\026\005\013\006\022" +
    "\007\014\010\034\011\035\013\027\015\012\033\136\040" +
    "\021\041\031\001\002\000\006\012\uffc0\033\uffc0\001\002" +
    "\000\004\037\151\001\002\000\004\040\147\001\002\000" +
    "\012\025\142\026\143\037\ufff1\046\047\001\002\000\004" +
    "\043\145\001\002\000\004\037\144\001\002\000\026\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\015\uffe6" +
    "\033\uffe6\040\uffe6\041\uffe6\001\002\000\004\037\146\001" +
    "\002\000\026\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\015\uffe9\033\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\004\037\150\001\002\000\026\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\015\uffe5\033\uffe5\040\uffe5\041" +
    "\uffe5\001\002\000\026\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\013\uffec\015\uffec\033\uffec\040\uffec\041\uffec\001" +
    "\002\000\014\030\155\040\161\042\156\043\153\044\162" +
    "\001\002\000\016\017\uffdb\020\uffdb\021\uffdb\022\uffdb\031" +
    "\uffdb\037\uffdb\001\002\000\016\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\031\uffdd\037\uffdd\001\002\000\012\030\155\040" +
    "\161\042\156\043\153\001\002\000\016\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\031\uffda\037\uffda\001\002\000\016\017" +
    "\uffe0\020\uffe0\021\171\022\170\031\uffe0\037\uffe0\001\002" +
    "\000\010\017\166\020\165\037\164\001\002\000\016\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\031\uffdc\037\uffdc\001\002" +
    "\000\004\037\163\001\002\000\026\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3\033\uffe3\040\uffe3" +
    "\041\uffe3\001\002\000\026\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\013\uffe4\015\uffe4\033\uffe4\040\uffe4\041\uffe4" +
    "\001\002\000\012\030\155\040\161\042\156\043\153\001" +
    "\002\000\012\030\155\040\161\042\156\043\153\001\002" +
    "\000\016\017\uffe2\020\uffe2\021\171\022\170\031\uffe2\037" +
    "\uffe2\001\002\000\012\030\155\040\161\042\156\043\153" +
    "\001\002\000\012\030\155\040\161\042\156\043\153\001" +
    "\002\000\016\017\uffdf\020\uffdf\021\uffdf\022\uffdf\031\uffdf" +
    "\037\uffdf\001\002\000\016\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\031\uffde\037\uffde\001\002\000\016\017\uffe1\020\uffe1" +
    "\021\171\022\170\031\uffe1\037\uffe1\001\002\000\010\017" +
    "\166\020\165\031\176\001\002\000\016\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\031\uffd9\037\uffd9\001\002\000\004\002" +
    "\000\001\002\000\004\037\205\001\002\000\010\025\202" +
    "\037\ufff1\046\047\001\002\000\004\042\203\001\002\000" +
    "\004\037\204\001\002\000\026\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\013\uffe8\015\uffe8\033\uffe8\040\uffe8\041" +
    "\uffe8\001\002\000\026\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\013\uffeb\015\uffeb\033\uffeb\040\uffeb\041\uffeb\001" +
    "\002\000\010\006\207\007\211\040\212\001\002\000\004" +
    "\040\251\001\002\000\004\031\245\001\002\000\004\040" +
    "\236\001\002\000\004\016\213\001\002\000\006\042\215" +
    "\043\214\001\002\000\004\037\232\001\002\000\004\037" +
    "\216\001\002\000\012\027\062\040\063\042\061\043\057" +
    "\001\002\000\004\037\220\001\002\000\006\026\223\040" +
    "\222\001\002\000\004\031\uffc9\001\002\000\006\025\225" +
    "\026\226\001\002\000\004\040\224\001\002\000\004\031" +
    "\uffc5\001\002\000\006\042\231\043\230\001\002\000\004" +
    "\037\227\001\002\000\004\031\uffc6\001\002\000\004\031" +
    "\uffc8\001\002\000\004\031\uffc7\001\002\000\012\027\062" +
    "\040\063\042\061\043\057\001\002\000\004\037\234\001" +
    "\002\000\006\026\223\040\222\001\002\000\004\031\uffca" +
    "\001\002\000\004\016\237\001\002\000\004\042\240\001" +
    "\002\000\004\037\241\001\002\000\012\027\062\040\063" +
    "\042\061\043\057\001\002\000\004\037\243\001\002\000" +
    "\006\026\223\040\222\001\002\000\004\031\uffcb\001\002" +
    "\000\004\032\246\001\002\000\024\005\013\006\022\007" +
    "\014\010\034\011\035\013\027\015\012\040\021\041\031" +
    "\001\002\000\026\005\013\006\022\007\014\010\034\011" +
    "\035\013\027\015\012\033\250\040\021\041\031\001\002" +
    "\000\026\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\015\uffcd\033\uffcd\040\uffcd\041\uffcd\001\002\000\004" +
    "\016\252\001\002\000\004\043\253\001\002\000\004\037" +
    "\254\001\002\000\012\027\062\040\063\042\061\043\057" +
    "\001\002\000\004\037\256\001\002\000\006\026\223\040" +
    "\222\001\002\000\004\031\uffcc\001\002\000\026\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\015\uffc4\033" +
    "\uffc4\040\uffc4\041\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\015\004\016\005\017\006\025\007" +
    "\031\011\032\013\027\016\024\021\023\022\014\024\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\177\001\001\000\002\001\001\000\026\004\100\005\017" +
    "\006\025\007\031\011\106\013\105\016\104\021\103\022" +
    "\077\024\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\076\004\016\005" +
    "\017\006\025\007\031\011\032\013\027\016\024\021\023" +
    "\022\014\024\022\001\001\000\026\004\100\005\017\006" +
    "\025\007\031\011\106\013\105\016\104\021\103\022\077" +
    "\024\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\125\004\016\005\017\006\025\007\031\011\032" +
    "\013\027\016\024\021\023\022\014\024\022\001\001\000" +
    "\026\004\100\005\017\006\025\007\031\011\106\013\105" +
    "\016\104\021\103\022\077\024\102\001\001\000\002\001" +
    "\001\000\030\003\130\004\016\005\017\006\025\007\031" +
    "\011\032\013\027\016\024\021\023\022\014\024\022\001" +
    "\001\000\026\004\100\005\017\006\025\007\031\011\106" +
    "\013\105\016\104\021\103\022\077\024\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\134\004\016" +
    "\005\017\006\025\007\031\011\032\013\027\016\024\021" +
    "\023\022\014\024\022\001\001\000\026\004\100\005\017" +
    "\006\025\007\031\011\106\013\105\016\104\021\103\022" +
    "\077\024\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\157\026\156\027\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\174\026\156\027" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\173\027\153\001\001" +
    "\000\006\026\166\027\153\001\001\000\002\001\001\000" +
    "\004\027\172\001\001\000\004\027\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\216\001\001\000\002\001\001\000" +
    "\004\010\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\232\001\001\000\002\001\001\000" +
    "\004\010\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\241\001" +
    "\001\000\002\001\001\000\004\010\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\246\004\016\005" +
    "\017\006\025\007\031\011\032\013\027\016\024\021\023" +
    "\022\014\024\022\001\001\000\026\004\100\005\017\006" +
    "\025\007\031\011\106\013\105\016\104\021\103\022\077" +
    "\024\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\254\001\001" +
    "\000\002\001\001\000\004\010\256\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TOAD ::= Peach Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOAD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TOAD ::= TOAD Toad Numero Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOAD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TOAD ::= Toad Numero Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TOAD",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASTILLO ::= Castillo Parentesis_a Identificador Parentesis_c Llave_a TOAD Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASTILLO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // METODO ::= Metodo Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // METODO ::= Metodo Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // POWERUP ::= PowerUp P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("POWERUP",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_PUENTE ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_PUENTE ::= Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_PUENTE ::= Identificador Op_atribucion NumeroFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_PUENTE ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PUENTE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_PUENTE ::= Identificador Igual NumeroFlotante P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_PUENTE ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_PUENTE ::= Luigi Identificador Igual NumeroFlotante P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_PUENTE ::= Mario Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PUENTE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PUENTE ::= Puente Parentesis_a SENTENCIA_PUENTE Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PUENTE",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= NumeroFlotante Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= NumeroFlotante Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional NumeroFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TUBERIA ::= Tuberia Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TUBERIA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= NumeroFlotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERMINO ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERMINO ::= TERMINO Division FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERMINO ::= TERMINO Multiplicacion FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION Resta TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION Suma TERMINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= Identificador Igual EXPRESION P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_INCREMENTO ::= Mario Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_INCREMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_INCREMENTO ::= Mario Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_INCREMENTO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_ASIGNACION ::= Chomp Identificador Igual Cadena P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_ASIGNACION ::= Luigi Identificador Op_atribucion NumeroFlotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_ASIGNACION ::= Mario Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_SIMPLE ::= Chomp LISTA_IDS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_SIMPLE ::= Luigi LISTA_IDS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_SIMPLE ::= Mario LISTA_IDS P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SIMPLE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= DECLARACION_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= DECLARACION_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= DECLARACION_SIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_IDS ::= Identificador Coma LISTA_IDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_IDS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= POWERUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA POWERUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= CASTILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA CASTILLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA PUENTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= TUBERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA TUBERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

